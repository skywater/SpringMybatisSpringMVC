<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd		
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd ">

	<!-- <mvc:annotation-driven></mvc:annotation-driven> -->
	
	    <!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
                <property name="prettyPrint" value="false"/>
                <property name="objectMapper">
                    <bean class="com.fasterxml.jackson.databind.ObjectMapper"></bean>
                </property>
            </bean>
            <!-- 使用XML格式输出数据 -->
          <!--  <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                <constructor-arg>
                      <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                        <property name="streamDriver">
                            <bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
                        </property>
                       <property name="annotatedClasses">
                            <list>
                                <value>com.thinkgem.jeesite.common.persistence.BaseEntity</value>
                                <value>com.thinkgem.jeesite.common.supcan.treelist.TreeList</value>
                                <value>com.thinkgem.jeesite.common.supcan.treelist.cols.Col</value>
                                <value>com.thinkgem.jeesite.common.supcan.treelist.cols.Group</value>
                            </list>
                        </property>
                    </bean> 
                </constructor-arg>
                <property name="supportedMediaTypes" value="application/xml"></property>
            </bean>-->
        </mvc:message-converters>
    </mvc:annotation-driven>
    
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- AOP 注解方式 ；定义Aspect -->
    <!-- 激活组件扫描功能,在包"com.example.aop及其子包下面自动扫描通过注解配置的组件-->
    <!-- 在spring监听的spring-context文件中已经扫描了去除Controller的所有Component文件，并把他们注册成了bean,所以这里只需要扫描Controller就可以了-->
   <!--  <context:component-scan base-package="com.hand.ssmanno,com.hand.ssm.controller" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan> -->
    <context:component-scan base-package="com.hand.ssm.controller"></context:component-scan>
    <!-- 启动AspectJ支持   只对扫描过的bean有效-->
    <!-- <aop:aspectj-autoproxy proxy-target-class="true"/> -->
    <aop:aspectj-autoproxy/>
	<bean id="paramDealAspect" class="com.hand.ssm.anno.ParamDealAspect"/>
</beans>